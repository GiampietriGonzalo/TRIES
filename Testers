TESTER DE Trie.c


int main(){

    int (* f_comp)(void *, void *);
    f_comp=f_comparador;
    char* p=malloc(sizeof(char));
    char str[200] = {"hola"};
    char str1[200] = {"holanda"};
    TNodo n1;

    printf("<<<<TESTER TRIE>>>>\n");
    printf("\n");
    printf("<TRIE VACIO>\n");
        TTrie trie= malloc(sizeof(TTrie));
        trie->cantidad_elementos=0;
        TNodo root= malloc(sizeof(TNodo));
        root->contador=0;
        TListaOrdenada lista_hijos=crear_lista_ordenada(f_comp);
        root->hijos=lista_hijos;
        root->padre=NULL;
        trie->raiz=root;

        printf("Size: %d \n", tr_size(trie));

        if(tr_pertenece(trie,str)==TRUE)  printf("Pertenece no funciona con trie vacio\n");
        else printf("Pertenece funciona con trie vacio\n");

        n1=tr_buscar_auxiliar(trie,str);
        if(n1!=NULL) printf("tr_buscar_auxiliar incorrecto. \n");
        else printf("tr_buscar_axuliar correcto. retorno NULL \n");

    printf("\n");
    printf("<TRIE CON 1 ELEMENTO>\n");

        if(tr_insertar(trie,p)==FALSE) printf("Insertar funciona con NULL\n");
        else printf("Insertar no funciona con NULL\n");

        if(tr_insertar(trie,str)==TRUE)  printf("Insertar funciona con hola\n");
        else printf("Insertar no funciona\n");
        printf("Size: %d \n" , tr_size(trie));


        if(tr_pertenece(trie,str)==TRUE)  printf("Pertenece funciona\n");
        else printf("Pertenece no funciona\n");

        n1=tr_buscar_auxiliar(trie,str);
        if(n1!=NULL) printf("tr_buscar_auxiliar correcto. Elemento: %c , Contador: %d\n" , n1->rotulo ,n1->contador);
        else printf("tr_buscar_axuliar incorrecto. retorno NULL \n");

        printf("String: %s \n" , str);
        printf("Recuperar: %d \n" , tr_recuperar(trie,str));
        printf("Resultado de eliminar: %d \n" , tr_eliminar(trie,str));

    printf("\n");
    printf("<TRIE CON 2 ELEMENTO, UNO PREFIJO DE OTRO>\n");

        if(tr_insertar(trie,str1)==TRUE)  printf("Insertar funciona con holanda\n");
        else printf("Insertar no funciona con holanda\n");
        printf("Size: %d \n" , tr_size(trie));

        printf("Recuperar de hola: %d \n" , tr_recuperar(trie,str));
        printf("Recuperar de holanda: %d \n" , tr_recuperar(trie,str1));

        if(tr_pertenece(trie,str1)==TRUE)  printf("Pertenece funciona con holanda\n");
        else printf("Pertenece no funciona\n");

        n1=tr_buscar_auxiliar(trie,str1);
        if(n1!=NULL) printf("tr_buscar_auxiliar correcto. Elemento: %c , Contador: %d\n" , n1->rotulo ,n1->contador);
        else printf("tr_buscar_axuliar incorrecto. retorno NULL \n");

    printf("\n");
    printf("\n");
    printf("TRIE: ");
    TNodo point=trie->raiz;
    while(lo_size(point->hijos)>0){
        printf(" [%c] " , ((TNodo)(lo_primera(point->hijos)->elemento))->rotulo);
        point= ((TNodo)(lo_primera(point->hijos)->elemento));
    }


    printf("\n");
    printf("\n");
    printf("\n");

    return 0;
}




TESTER ListaOrdenada


int main(){



    int (*funcion_c)(void*,void*);

    int f_comparador(void* v1, void* v2){
        int* n1=v1;
        int* n2=v2;
        int res=0;

        if((*n1)>(*n2))
            res=1;
        else
            if((*n1)<*(n2))
                res=-1;

        return res;
    }

    funcion_c=f_comparador;



    printf("<<<<TESTER ListaOrdenada>>>>\n");
    printf("\n");

    TListaOrdenada lo;
    int* n1=malloc(sizeof(int));
    int* n2=malloc(sizeof(int));
    int* n3=malloc(sizeof(int));
    int* n4=malloc(sizeof(int));
    int* n5=malloc(sizeof(int));

    TPosicion primera,ultima,siguiente,auxiliar;

        printf("<Crear_Lista_Ordenada>\n");
            lo=crear_lista_ordenada(funcion_c);

        printf("\n");

            printf("<LISTA VACIA>\n");
                printf("Size: %d\n",lo_size(lo));
                if(lo_primera(lo)==NULL) printf("lo_Primera correcto\n");
                else printf("lo_Primera incorrecto \n");
                if(lo_ultima(lo)==NULL) printf("lo_Ultima correcto\n");
                else printf("lo_Ultima incorrecto \n");
                printf("Resultado de eliminar: %d (si es 3, es correcto) \n", lo_eliminar(lo,lo_primera(lo)));
                if(lo_siguiente(lo,lo_primera(lo)) == NULL) printf("lo_Siguiente correcto \n");
                else printf("lo_siguiente incorrecto \n");

            printf("\n");

            printf("<UN SOLO ELEMENTO>\n");
                *n1=3;
                printf("Resultado de insertar el número 3: %d \n",lo_insertar(lo,n1));
                printf("Size: %d \n", lo_size(lo));
                primera=lo_primera(lo);
                ultima=lo_ultima(lo);
                printf("Primer: %d - ultimo: %d \n" , *((int*)primera->elemento),*((int*)ultima->elemento));
                primera=lo_siguiente(lo,primera);
                if(primera==NULL) printf("Siguiente: Correcto \n");
                else printf("Siguiente: Incorrecto y elem: %d\n", *((int*)primera->elemento));
                printf("Resultado de eliminar: %d\n" , lo_eliminar(lo,ultima));


            printf("\n");

            //LA LISTA ESTA VACIA EN ESTE PUNTO.
            printf("<CORROBORACION DE LISA VACIA>\n");
                printf("Size: %d\n",lo_size(lo));
                if(lo_primera(lo)==NULL) printf("lo_Primera correcto\n");
                else printf("lo_Primera incorrecto \n");
                if(lo_ultima(lo)==NULL) printf("lo_Ultima correcto\n");
                else printf("lo_Ultima incorrecto \n");
                printf("Resultado de eliminar: %d (si es 3, es correcto) \n", lo_eliminar(lo,lo_primera(lo)));
                if(lo_siguiente(lo,lo_primera(lo)) == NULL) printf("lo_Siguiente correcto \n");
                else printf("lo_siguiente incorrecto \n");

            printf("\n");

            printf("<2 ELEMENTOS>\n");
                n1=malloc(sizeof(int));
                n2=malloc(sizeof(int));
                *n1=4;
                *n2=3;

                printf("Resultado de insertar 4: %d\n" , lo_insertar(lo,n1));
                printf("Resultado de insertar 3: %d\n" , lo_insertar(lo,n2));
                printf("Size: %d \n", lo_size(lo));
                primera=lo_primera(lo);
                ultima=lo_ultima(lo);
                printf("Primer: %d - ultimo: %d \n" , *((int*)primera->elemento),*((int*)ultima->elemento));
                siguiente=lo_siguiente(lo,primera);
                if (siguiente!=NULL) printf("siguiente de primera: %d\n" , *((int*)siguiente->elemento));
                else printf("siguiente incorrecto en primer elemento \n");
                siguiente=lo_siguiente(lo,ultima);
                if (siguiente!=NULL) printf("siguiente incorrecto en último elemento. Elemento: %d\n" , *((int*)siguiente->elemento));
                else printf("siguiente Correcto en último elemento \n");
                printf("Resultado de eliminar primera: %d\n", lo_eliminar(lo,primera));
                printf("Resultado de eliminar ultima: %d\n", lo_eliminar(lo,ultima));

            printf("\n");

            printf("<CORROBORACION DE LISA VACIA>\n");
                printf("Size: %d\n",lo_size(lo));
                if(lo_primera(lo)==NULL) printf("lo_Primera correcto\n");
                else printf("lo_Primera incorrecto \n");
                if(lo_ultima(lo)==NULL) printf("lo_Ultima correcto\n");
                else printf("lo_Ultima incorrecto \n");
                printf("Resultado de eliminar: %d (si es 3, es correcto) \n", lo_eliminar(lo,lo_primera(lo)));
                if(lo_siguiente(lo,lo_primera(lo)) == NULL) printf("lo_Siguiente correcto \n");
                else printf("lo_siguiente incorrecto \n");

            printf("\n");

            printf("<MAS DE 2 ELEMENTOS>\n");
                n1=malloc(sizeof(int));
                n2=malloc(sizeof(int));
                *n1=4;
                *n2=3;
                *n3=1;
                *n4=7;
                *n5=2;

                printf("Resultado de insertar 4: %d\n" , lo_insertar(lo,n1));
                printf("Resultado de insertar 3: %d\n" , lo_insertar(lo,n2));
                printf("Resultado de insertar 1: %d\n" , lo_insertar(lo,n3));
                printf("Resultado de insertar 7: %d\n" , lo_insertar(lo,n4));
                printf("Resultado de insertar 2: %d\n" , lo_insertar(lo,n5));
                printf("Size: %d \n", lo_size(lo));

                primera=lo_primera(lo);
                ultima=lo_ultima(lo);
                printf("Primer: %d - ultimo: %d \n" , *((int*)primera->elemento),*((int*)ultima->elemento));
                siguiente=lo_siguiente(lo,primera);
                if (siguiente!=NULL) printf("siguiente de primera: %d\n" , *((int*)siguiente->elemento));
                else printf("siguiente incorrecto en primer elemento \n");

                printf("\n");
                printf("Elementos de la listaOrdenada:  ");
                auxiliar=lo_primera(lo);

                while(auxiliar!=NULL){
                    printf(" [%d] " , *((int*)auxiliar->elemento));
                    auxiliar=lo_siguiente(lo,auxiliar);
                }

                printf("\n");

                siguiente=lo_siguiente(lo,ultima);
                if (siguiente!=NULL) printf("siguiente incorrecto en último elemento. Elemento: %d\n" , *((int*)siguiente->elemento));
                else printf("siguiente Correcto en último elemento \n");
                printf("Resultado de eliminar primera: %d\n", lo_eliminar(lo,primera));
                printf("Resultado de eliminar ultima: %d\n", lo_eliminar(lo,ultima));

                auxiliar=lo_primera(lo);
                while(lo_size(lo)>0){
                    printf("Resultado de eliminar el resto de los elementos: %d (si es 1, es correcto) \n", lo_eliminar(lo,auxiliar));
                    auxiliar=lo_primera(lo);
                }

            printf("\n");

            printf("<CORROBORACION DE LISA VACIA>\n");
                printf("Size: %d\n",lo_size(lo));
                if(lo_primera(lo)==NULL) printf("lo_Primera correcto\n");
                else printf("lo_Primera incorrecto \n");
                if(lo_ultima(lo)==NULL) printf("lo_Ultima correcto\n");
                else printf("lo_Ultima incorrecto \n");
                printf("Resultado de eliminar: %d (si es 3, es correcto) \n", lo_eliminar(lo,lo_primera(lo)));
                if(lo_siguiente(lo,lo_primera(lo)) == NULL) printf("lo_Siguiente correcto \n");
                else printf("lo_siguiente incorrecto \n");

            printf("\n");


    return 0;
}



TESTER Lista

int main(){

    printf("<<< TESTER TDALista >>>\n");
    printf("\n");


    int r=0,i=9;
    TLista lista= malloc(sizeof(TLista));
    lista=crear_lista();
    int* n=malloc(sizeof(int));
    TElemento elem=malloc(sizeof(int));
    *n=77;
    elem=n;
    TPosicion pos;
    TCelda aux;

    TElemento n1= malloc(sizeof(int));
    TElemento n2= malloc(sizeof(int));
    TElemento n3= malloc(sizeof(int));
    TElemento n4= malloc(sizeof(int));
    TElemento n5= malloc(sizeof(int));
    TElemento n6= malloc(sizeof(int));
    TElemento n7= malloc(sizeof(int));
    int* i1=malloc(sizeof(int));
    int* i2=malloc(sizeof(int));
    int* i3=malloc(sizeof(int));
    int* i4=malloc(sizeof(int));
    int* i5=malloc(sizeof(int));
    int* i6=malloc(sizeof(int));
    int* i7=malloc(sizeof(int));
    *i1=6; *i2=7; *i3=8; *i4=9;
    n1=i1; n2=i2; n3=i3; n4=i4;

    *i5=2; *i6=88; *i7=77;
    n5=i5; n6=i6; n7=i7;


    printf("---Insertar---\n");
    r=l_insertar(lista,NULL,n5);
    printf("Resultado de insertar: %d \n" , r);
    printf("Elemento insertado: %d \n" , *(((int*)lista->primer_celda->elemento)));
    printf("Cantidad de elementos de la lista: %d \n",lista->cantidad_elementos);

    printf("\n");

    printf("Inserción de otro elemento\n");

    r=l_insertar(lista,lista->primer_celda,n6);
    printf("Resultado de insertar: %d \n" , r);
    printf("Elemento insertado: %d \n" , *(((int*)lista->primer_celda->elemento)));
    printf("Cantidad de elementos de la lista: %d \n",lista->cantidad_elementos);

    printf("\n");

    printf("Inserción de otro elemento\n");

    r=l_insertar(lista,lista->primer_celda->proxima_celda,n7);
    printf("Resultado de insertar: %d \n" , r);
    printf("Elemento insertado: %d \n" ,  *((int*)(lista->primer_celda->proxima_celda->elemento)));
    printf("Cantidad de elementos de la lista: %d \n",lista->cantidad_elementos);

    //LISTA HASTA AHORA 2-88-77
    printf("\n");

    printf("---Eliminar---\n");
    pos=lista->primer_celda->proxima_celda->proxima_celda;
    printf("Elemento eliminado: %d \n",*((int*)pos->elemento));
    r=l_eliminar(lista,pos);
    printf("Resultado de eliminar con un elemento: %d \n" , r);

    //LISTA HASTA AHORA 2-88

    printf("\n");
    l_eliminar(lista,l_primera(lista));



    l_insertar(lista,NULL,n1);
    l_insertar(lista,NULL,n2);
    l_insertar(lista,NULL,n3);
    l_insertar(lista,NULL,n4);
    //LISTA HASTA AHORA 6-7-8-9-88

    printf("Lista: ");
    aux=l_primera(lista);
    while(aux!=NULL){
        printf("[%d] ", *((int*)(aux->elemento)));
        aux=aux->proxima_celda;
    }


    printf("\n");
    printf("\n");

    printf("---Primera---\n");
    printf("Elemento de la primera posicion de la lista: %d \n" , *((int*)l_primera(lista)->elemento));

    printf("\n");

    printf("---Ultima---\n");
    printf("Elemento de la última posicion de la lista: %d \n" , *((int*)l_ultima(lista)->elemento));

    printf("\n");

    printf("---Anterior---\n");
    r=l_anterior(lista,l_primera(lista));
    printf("Resultado del Anterior del primer elemento: %d \n" , r);
    printf("Anterior del último elemento: %d \n" , *((int*)l_anterior(lista,l_ultima(lista))->elemento));

    printf("\n");

    printf("---Recuperar---\n");
    r=l_recuperar(lista,NULL);
    printf("Resultado del recuperar el elemento de una posición nula: %d \n" , r);
    printf("Elemento recuperado de la primer posicion: %d \n" , *((int*)l_recuperar(lista,l_primera(lista))));

    aux=lista->primer_celda->proxima_celda->proxima_celda;

    printf("\n");

    printf("---Recuperar elemento que no es el primero ni ultmo---\n");
    printf("Elemento recuperado de una posicion no nula: %d \n" , *((int*)l_recuperar(lista,aux)));

	return 0;
}



TESTER evaluador

int main(char *argv[]) {
	
	FILE* archivo=fopen("a.txt","rt");
	
	TTrie tr;
	printf("Se abrio el archivo\n");
	int opcion=0;
		
	do {
		printf("\n1.Mostrar palabras\n");
		printf("2.Consultar\n");
		printf("3.Comienza con\n");
		printf("4.Es prefijo\n");
		printf("5.Porcentaje prefijo\n");
		printf("6.Salir\n");
		scanf("%d",&opcion);
		
		switch(opcion) {
		case 1:
			
			break;
		case 2:
			printf("Ingrese la palabra a consultar: ");
			char* str;
			scanf("%s",str);
			int cant=consultar(tr,str);
			if(cant>0)
				printf("La palabra pertenece al archivo y aparece %i veces",cant);
			else
				printf("La palabra no pertenece al archivo");
			
			break;
		case 3:
			printf("Ingrese una letra: ");
			char c;
			scanf("%c",&c);
			int i;
			i=comienzaCon(tr,c);
			printf("Hay %i palabras que comienzan con la letra %c ",i,c);
		
			break;
		case 4:
			printf("Ingrese la palabra a consultar: ");
			char *s;
			scanf("%s",s);
			int j=esPrefijo(tr->raiz,s,strlen(s));
			if(j==1) printf("La palabra es prefijo de alguna palabra en el archivo");
			else printf("La palabra no es prefijo de ninguna plabra, o no se encuentra en el archivo");
			break;
		case 5:
			
			break;
		case 6:
			
			break;
		}
	
	} while(opcion!=6);
	
	return 0;
}


//VER
malloc(sizeof(STRUCT TNodo));



//tr_insertar original


int tr_insertar(TTrie tr, char* str){

    int resultado=FALSE;
    TNodo nodo,nuevo;
    TListaOrdenada hijos;
    char* aux=str;
    int longitud=strlen(str);
    TListaOrdenada nuevaLista;

    if(longitud>0 && tr_pertenece(tr,aux)==TRUE){
        //LA PALABRA YA SE ENCUENTRA EN EL TRIE
        nodo=tr_buscar_auxiliar(tr,aux);
        if(nodo!=NULL){
            nodo->contador++;
            resultado=TRUE;
            tr->cantidad_elementos++;
        }
    }
    else
      if(longitud>0){
        nodo=tr->raiz;
        hijos=nodo->hijos;

        if(lo_size(hijos)>0){

            nodo=tr_recuperarHijo_auxiliar(nodo,aux);
					
            if (nodo!=NULL){
                hijos=nodo->hijos;
                if(nodo->contador>0) nodo->contador++;

                while(longitud > 0 && lo_size(hijos)!=0){
                    aux++;
										longitud--;					
									
                    nodo=tr_recuperarHijo_auxiliar(nodo,aux);
										
									
                    if (nodo!=NULL){
                        hijos=nodo->hijos;
                        if(nodo->contador>0) nodo->contador++;
                    }
									
										if(nodo!=NULL && longitud==1)
												nodo->contador++;	
										
                }//fin while
            }
        }
				
				
				printf("longitud: %d \n", longitud);
	
        if(nodo!=NULL && nodo->contador>0 && longitud>0){
            aux++;
            longitud--;
        }

        //Agrego los nodos faltantes de la palabra.
        while(longitud>0){

            nuevo=malloc(sizeof(TNodo));
            nuevaLista=crear_lista_ordenada(f_comp);
            nuevo->hijos=nuevaLista;
            nuevo->rotulo=*aux;
            nuevo->padre=nodo;
            if(longitud==1)
                nuevo->contador=1;
            else
                nuevo->contador=0;

            lo_insertar(hijos,nuevo);

            aux++;

            longitud--;
						nodo=nuevo;
            hijos=nuevaLista;
						

        }

        tr->cantidad_elementos++;
        resultado=TRUE;
    }
    return resultado;
}

